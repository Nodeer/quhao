# This is the main configuration file for the application.
# ~~~~~
application.name=quhao.appserver

# domain name
application.domain=http://localhost:9081
%prod.application.domain=http://www.quhao.la
%server01.application.domain=http://114.215.171.217

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod 
%server01.application.mode=prod

# will be change when we got bigger instance

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=SwIiUalTCcCdM5LvRwxWjMOnbYcmkreQh6nJlYJdcOTpf9dkJX12JzgbDxCshFXA

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=yyyy-MM-dd HH:mm:ss
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9000
http.port=9081

#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
application.session.maxAge=60min
# application.session.secure=false

# Import the secure module
#module.secure=${play.path}/modules/secure

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.5

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
application.log=DEBUG
#
# More logging configuration
application.log.path=/log4j.properties
application.log.system.out=off
application.log.recordCaller=true

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
# db=mem
#
# To connect to a local MySQL5 database, use:
# db=mysql://user:pwd@host/database
#
# To connect to a local PostgreSQL9 database, use:
# db=postgres://user:pwd@host/database
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it 
# (default to update in DEV mode, and none in PROD mode):
# jpa.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments
merchants.path=data/merchants
topMerchants.path=data/topmerchants
android.download.path=data/app/android/Quhao.apk
ios.download.path=data/app/ios

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
# mail.smtp=mock

# Or, specify mail host configuration
# mail.smtp.host=127.0.0.1
# mail.smtp.user=admin
# mail.smtp.pass=
# mail.smtp.channel=ssl

# gmail configuration
# mail.smtp.host=smtp.gmail.com
# mail.smtp.user=noreplyquhao@gmail.com
# mail.smtp.pass=Withiter@winner
# mail.smtp.channel=ssl
# mail.smtp.port=465
# mail.debug=true

# 126 configuration
# mail.smtp.host=smtp.126.com
# mail.smtp.user=noreply_quhao@126.com
# mail.smtp.pass=Withiter@winner
# mail.smtp.channel=ssl
# mail.smtp.port=25
# mail.debug=true

# QQ 企业邮箱
mail.smtp.host=smtp.exmail.qq.com
mail.smtp.user=noreply@quhao.la
mail.smtp.pass=Group@withiter123
mail.smtp.channel=ssl
mail.smtp.port=465
mail.debug=true

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
%prod.play.pool=30

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
# %test.module.cobertura=${play.path}/modules/cobertura
# %test.application.mode=dev
# %test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
# %test.jpa.ddl=create
%test.mail.smtp=mock

morphia.db.seeds=127.0.0.1:27017
morphia.db.name=quhao-dev-db

%test.morphia.db.seeds=127.0.0.1:27017
%test.morphia.db.name=quhao-test-db

press.enabled=false
%prod.press.enabled=true
%prod.press.cache=Always

geoip.datdir=data/geoip

# Applied by withiter@126.com
service.geocoding.baseurl=http://api.map.baidu.com/geocoder
develop.geocoding.app.key=c5df6a3c70535c64f58437cbaf5a675f
%prod.geocoding.app.key=c5df6a3c70535c64f58437cbaf5a675f

# Applied by withiter@126.com, the key support 10,0000 calls/day
service.direction.baseurl=http://api.map.baidu.com/direction/v1
develop.direction.app.ak=5b47359944b06963f1e7bf0adcf36caa
%prod.direction.app.ak=5b47359944b06963f1e7bf0adcf36caa

# Applied by withiter@126.com
develop.iossdk.app.key=A69D59C225642C3BF6381366BC7305C531E36C02 
%prod.iossdk.app.key=A69D59C225642C3BF6381366BC7305C531E36C02

# Applied by withiter/Group@withiter
# http://www.smschinese.cn/default.shtml
# Send message API
service.sms.uid=withiter
service.sms.key=65a4d62f45a07fd1d206
service.sms.authCodeForSignup=您在「取号啦」注册的动态密码是：
service.sms.paiduihao=您的排队号是
service.sms.qianmian=号，在您前面还有
service.sms.apptuijian=位排队，推荐使用「取号啦」APP，远程排队。
service.sms.remind=「取号啦」提醒您，在您前面还有4个人，请根据您的时间状况前往商家，或者取消排号。推荐使用「取号啦」APP，远程排队。

# image store
image.store.path=/image/f?fileName=

# credit
# 每日签到，获得积分
credit.exchange.jifen=1
# 用户拿号，消费积分
credit.getnumber.jifen=1
# 取消取号，返还积分
credit.cancel.jifen=1
# 完成消费，返还积分
credit.finished.jifen=1
# 用户评论，获得积分
# credit.comment.jifen=1

################################################################
##############		AMAP(高德地图) Config	####################
# 账号:quhaola
# 密码:Group@withiter
# key
amap.key=60d9c5881dbe8dddd3de33aaacac0cbe

################################################################
##############			Sina weibo			####################
sina.app.key=983729496
sina.app.secret=515b476bfc1c7a5b7e4da0bb6eae6764

################################################################
##############			APP Config			####################
app.versioncode.android=2
app.versioncode.ios=1.0.1
